// Generated by CoffeeScript 1.8.0
(function() {
  define(function(require) {
    var $, Backbone, Cell, PIXI, chroma, _;
    $ = require("jquery");
    _ = require("underscore");
    Backbone = require("backbone");
    PIXI = require("pixi");
    chroma = require("chroma-js");
    Cell = {};
    Cell.initialize = function(options) {
      _.bindAll(this);

      /*
            properties
       */
      this.isChanging = false;
      this.pos = {
        x: options.x,
        y: options.y
      };
      this.size = options.size;
      this.brightness = options.brightness || 15;
      this.color = options.color.brighter(this.brightness);
      this.flashSpeedIn = options.flashSpeedIn || 0.01;
      this.flashSpeedOut = options.flashSpeedOut || 0.02;

      /*
            building the pixi object needed to render
       */
      this.graphics = new PIXI.Graphics();
      this.graphics.alpha = 0;

      /*
            used to determine if the alpha anim is going up or coming down
       */
      this.rising = true;

      /*
            when dead, the cell will be cut out and garbage collected from the manager
       */
      this.dead = false;
      this.render();
    };

    /*
       draw the cell to the screen
     */
    Cell.render = function() {
      this.graphics.clear();
      this.graphics.beginFill(this.stringToColor(this.color));
      this.graphics.drawRect(this.pos.x, this.pos.y, this.size, this.size);
      this.graphics.endFill();
    };

    /*
       update the animation color/alpha. called each from from the manager
     */
    Cell.update = function() {
      this.changeColor();
      this.render();
    };

    /*
       util function to strip the # from a string and convert hex characters to color int
     */
    Cell.stringToColor = function(chromaColor) {
      return parseInt('0x' + chromaColor.hex().replace('#', ''));
    };

    /*
       animation logic for each cell
     */
    Cell.changeColor = function() {
      if (this.graphics.alpha < 1 && this.rising) {
        this.graphics.alpha += this.flashSpeedIn;
      } else if (this.graphics.alpha >= 1) {
        this.rising = false;
        this.graphics.alpha -= this.flashSpeedOut;
      } else if (this.rising === false) {
        this.graphics.alpha -= this.flashSpeedOut;
        if (this.graphics.alpha <= 0) {
          this.dead = true;
        }
      }
    };

    /*
       garbage collection for the cell when removed from the stage
     */
    Cell.close = function() {
      this.graphics.clear();
      this.remove();
      this.unbind();
    };
    return Backbone.View.extend(Cell);
  });

}).call(this);
