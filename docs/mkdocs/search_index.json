{
    "docs": [
        {
            "location": "/",
            "text": "Hello",
            "title": "Home"
        },
        {
            "location": "/#hello",
            "text": "",
            "title": "Hello"
        },
        {
            "location": "/setup/",
            "text": "Compatibility\n\n\nDecoy is tested to support:\n\n\n\n\nLatest Chrome (recommended)\n\n\nLatest Firefox\n\n\nLatest Safari\n\n\nIE 9-11\n\n\niOS 8 Safari on iPhone and iPad\n\n\nLatest Android Chrome\n\n\n\n\nVersion history\n\n\nSee the \nGithub \u201cReleases\u201d\n history\n\n\nInstallation\n\n\nDecoy expects to be installed ontop of \nCamo\n.  In particular, Decoy has dependencies that are part of Camo\u2019s dependency list.  For instance, there are some expectating on the version of Compass that is used.\n\n\nIf you \nare\n installing outside of Camo, here are some steps to get you started.\n\n\n\n\nAdd \n\"bkwld/decoy\": \"~5.0\",\n to your composer.json and install.  This reflects the latest stable branch.\n\n\n\n\nEdit the app config file as follows:\n\n\n<?php\n\n\n'providers'\n \n=>\n \n[\n\n    \nBkwld\\Decoy\\ServiceProvider\n::\nclass\n\n\n],\n \n'aliases'\n \n=>\n \n[\n\n    \n'Decoy'\n \n=>\n \nBkwld\\Decoy\\Facades\\Decoy\n::\nclass\n,\n\n    \n'DecoyURL'\n \n=>\n \nBkwld\\Decoy\\Facades\\DecoyURL\n::\nclass\n,\n\n\n],\n\n\n\n\n\n\n\n\n\n\nRun \nphp artisan vendor:publish --provider=\"Bkwld\\Decoy\\ServiceProvider\"\n\n\n\n\nRun \nphp artisan migrate\n\n\n\n\nContributing\n\n\n\n\n\n\nThe \nmaster\n branch represents what will be come the next \nminor\n release.\n\n\n\n\n\n\nA small, low-risk feature for an actively developed project should be created in a feature branch (based on the latest version-branch) and then merged into both the version-branch and master.\n\n\n\n\n\n\nA riskier feature should be worked on in a feature branch and then moved into master.  When it\u2019s finished, it can be come part of the next minor version release.  This git command gives you a nice view into commits that are new on master versus the most recent version (replace \n{branch}\n with the latest versioned-branch):\n\n\nbash git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative {branch}..master",
            "title": "Setup"
        },
        {
            "location": "/setup/#compatibility",
            "text": "Decoy is tested to support:   Latest Chrome (recommended)  Latest Firefox  Latest Safari  IE 9-11  iOS 8 Safari on iPhone and iPad  Latest Android Chrome",
            "title": "Compatibility"
        },
        {
            "location": "/setup/#version-history",
            "text": "See the  Github \u201cReleases\u201d  history",
            "title": "Version history"
        },
        {
            "location": "/setup/#installation",
            "text": "Decoy expects to be installed ontop of  Camo .  In particular, Decoy has dependencies that are part of Camo\u2019s dependency list.  For instance, there are some expectating on the version of Compass that is used.  If you  are  installing outside of Camo, here are some steps to get you started.   Add  \"bkwld/decoy\": \"~5.0\",  to your composer.json and install.  This reflects the latest stable branch.   Edit the app config file as follows:  <?php  'providers'   =>   [ \n     Bkwld\\Decoy\\ServiceProvider :: class  ],   'aliases'   =>   [ \n     'Decoy'   =>   Bkwld\\Decoy\\Facades\\Decoy :: class , \n     'DecoyURL'   =>   Bkwld\\Decoy\\Facades\\DecoyURL :: class ,  ],     Run  php artisan vendor:publish --provider=\"Bkwld\\Decoy\\ServiceProvider\"   Run  php artisan migrate",
            "title": "Installation"
        },
        {
            "location": "/setup/#contributing",
            "text": "The  master  branch represents what will be come the next  minor  release.    A small, low-risk feature for an actively developed project should be created in a feature branch (based on the latest version-branch) and then merged into both the version-branch and master.    A riskier feature should be worked on in a feature branch and then moved into master.  When it\u2019s finished, it can be come part of the next minor version release.  This git command gives you a nice view into commits that are new on master versus the most recent version (replace  {branch}  with the latest versioned-branch):  bash git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative {branch}..master",
            "title": "Contributing"
        },
        {
            "location": "/getting_started/",
            "text": "Config\n\n\nOn the average project, the only config file that would need changing is the \nsite.php\n file.  All sites will need to customize at least the \nnav\n and \npost_login_redirect\n properties.\n\n\nGenerators\n\n\nThe Decoy workflow begins with generating a migration for a database table using the \nstandard Laravel approach\n.  Then, Decoy provides a generator that creates the controller, model, and view for that table.  Run \nphp artisan decoy:generate Model\n where \u201cModel\u201d is the name of the Model class you intend to create.  This should be the singular form of the table you created.\n\n\nYou will now be able to access the index view for the new model by going to \u201c/admin/{plural model name}\u201d.  For instance, \u201c/admin/articles\u201d.  The generated files will contain commented out, boilerplate code that you can customize for your particular needs.\n\n\nRouting\n\n\nStandard CRUD routes\n\n\nDecoy registers a wildcard \nadmin/*\n route. It parses the requested path to determine what controller and action should be used.  The route is parsed by taking dash-delimited slugs of the controller and converting them to StudlyCased controller names and snakeCased actions on the controller.  You can read the Bkwld\\Decoy\\Controllers\\Base docs for all of the default actions, but here\u2019s an example of the more significant ones:\n\n\nAssuming your model is \nApp\\ProjectCategory\n with a controller of \nApp\\Http\\Controllers\\Admin\\ProjectCategories\n:\n\n\n\n\nGET /admin/project-categories\n - List all project categories\n\n\nGET /admin/project-categories/create\n - Form to create a new category\n\n\nPOST /admin/project-categories/create\n - Create a new category and redirect to edit action\n\n\nGET /admin/project-categories/2/edit\n - Form to edit category with primary key of \n2\n\n\nPOST /admin/project-categories/2/edit\n - Update the category and redirect to same edit action\n\n\nAlso supports \nPUT /admin/project-categories/2\n and \nPOST /admin/project-categories/2\n\n\nGET /admin/project-categories/2/destroy\n - Delete the category\n\n\nAlso supports \nDELETE /admin/project-categories/2\n\n\n\n\nCreating custom routes\n\n\nDecoy\u2019s wildcard router will interfere with creating custom /admin routes because it runs before app routes gets registered (and I \nhaven\u2019t found a way\n to delay it).  You can stop Decoy from registering it\u2019s routes via the \ndecoy.core.register_routes\n boolean config value and then manually register them after you finish registering your own routes. Thus:\n\n\n\n\nconfig/decoy/core.php\n:\n\n\n\n\nphp\n  'register_routes' => false,\n\n\n\n\napp/Http/routes.php\n:\n\n\n\n\n// Register custom \"example\" action\n\n\nRoute::group([\n\n\n  'middleware' => 'decoy.protected',\n\n\n  'prefix' => 'admin',\n\n\n  'namespace' => 'Admin',\n\n\n], function() {\n\n\n  Route::get('project-categories/example', 'ProjectCategories@example');\n\n\n});\n\n\n\n// Register rest of Decoy routes manually\n\n\napp('decoy.router')->registerAll();",
            "title": "Getting Started"
        },
        {
            "location": "/getting_started/#config",
            "text": "On the average project, the only config file that would need changing is the  site.php  file.  All sites will need to customize at least the  nav  and  post_login_redirect  properties.",
            "title": "Config"
        },
        {
            "location": "/getting_started/#generators",
            "text": "The Decoy workflow begins with generating a migration for a database table using the  standard Laravel approach .  Then, Decoy provides a generator that creates the controller, model, and view for that table.  Run  php artisan decoy:generate Model  where \u201cModel\u201d is the name of the Model class you intend to create.  This should be the singular form of the table you created.  You will now be able to access the index view for the new model by going to \u201c/admin/{plural model name}\u201d.  For instance, \u201c/admin/articles\u201d.  The generated files will contain commented out, boilerplate code that you can customize for your particular needs.",
            "title": "Generators"
        },
        {
            "location": "/getting_started/#routing",
            "text": "",
            "title": "Routing"
        },
        {
            "location": "/getting_started/#standard-crud-routes",
            "text": "Decoy registers a wildcard  admin/*  route. It parses the requested path to determine what controller and action should be used.  The route is parsed by taking dash-delimited slugs of the controller and converting them to StudlyCased controller names and snakeCased actions on the controller.  You can read the Bkwld\\Decoy\\Controllers\\Base docs for all of the default actions, but here\u2019s an example of the more significant ones:  Assuming your model is  App\\ProjectCategory  with a controller of  App\\Http\\Controllers\\Admin\\ProjectCategories :   GET /admin/project-categories  - List all project categories  GET /admin/project-categories/create  - Form to create a new category  POST /admin/project-categories/create  - Create a new category and redirect to edit action  GET /admin/project-categories/2/edit  - Form to edit category with primary key of  2  POST /admin/project-categories/2/edit  - Update the category and redirect to same edit action  Also supports  PUT /admin/project-categories/2  and  POST /admin/project-categories/2  GET /admin/project-categories/2/destroy  - Delete the category  Also supports  DELETE /admin/project-categories/2",
            "title": "Standard CRUD routes"
        },
        {
            "location": "/getting_started/#creating-custom-routes",
            "text": "Decoy\u2019s wildcard router will interfere with creating custom /admin routes because it runs before app routes gets registered (and I  haven\u2019t found a way  to delay it).  You can stop Decoy from registering it\u2019s routes via the  decoy.core.register_routes  boolean config value and then manually register them after you finish registering your own routes. Thus:   config/decoy/core.php :   php\n  'register_routes' => false,   app/Http/routes.php :   // Register custom \"example\" action  Route::group([    'middleware' => 'decoy.protected',    'prefix' => 'admin',    'namespace' => 'Admin',  ], function() {    Route::get('project-categories/example', 'ProjectCategories@example');  });  // Register rest of Decoy routes manually  app('decoy.router')->registerAll();",
            "title": "Creating custom routes"
        },
        {
            "location": "/models/",
            "text": "Decoy uses the same models as your app uses.  Thus, put them as per normal in /app and give them the namespace \nApp\\\n.  However, instead of extending \nEloquent\n, they should extend \nBkwld\\Decoy\\Models\\Base\n.\n\n\nQuerying\n\n\nDecoy adds a couple handy scopes and static methods via \nBkwld\\Decoy\\Models\\Base\n:\n\n\n\n\nModel::ordered()\n\n\nModel::findBySlugOrFail($slug)\n\n\n\n\nVisibility\n\n\nAdd a \n$table->boolean('public');\n column to a migration to add a \u201cpublic\u201d column that allows the admin to toggle between public and private visibility for a model.  This will automatically add the toggle UI to Decoy.\n\n\nYou can also use the following scopes to filter results to only public items:\n\n\n\n\nModel::public()\n\n\nModel::listing()\n // ordered() and public()\n\n\n\n\nFinally, you can call \n$model->enforceVisibility()\n to throw an access denied error if the user doesn\u2019t have permission to view a model.  This is called automatically by \nfindBySlugOrFail()\n.\n\n\nRelationships\n\n\nMany to Many relationships\n\n\nDecoy expects you to name your relationships after the model/table. So a post with many images should have an \u201cimages\u201d relationship defined.\n\n\nSince we typically add timestamps to pivot tables, you\u2019ll want to call \nwithTimestamps\n on relationships.  And, if the pivot rows should be sortable, you\u2019l need to use \nwithPivot('position')\n so that the position value gets rendered to the listing table.  Additionally, the easiest way to have Decoy sort by position in the admin is to add that \norderBy\n clause to the relationships as well.  So your full relationship function may look like (don\u2019t forget that both models in the relationship need to be defined):\n\n\npublic function images() \n{\n return \n$\nthis\n->belongsToMany('Image')->withTimestamps()->withPivot('position')->orderBy('article_image.position'); }\n\n\n\n\n\n\nHere is an example of how you can set the \nposition\n column to the \nMAX\n value, putting the attached record at the end, by using an event callback on the Model that gets attached:\n\n\n/**\n\n\n * When attached as a related set the position on the pivot column to the end\n\n\n *\n\n\n * @param  Illuminate\\Database\\Eloquent\\Model\n\n\n * @return void\n\n\n */\n\npublic\n \nfunction\n \nonAttached\n(\n$\nparent\n)\n \n{\n\n\n    \nif\n \n(\nget_class\n(\n$\nparent\n)\n \n==\n \n'Article'\n)\n \n{\n\n\n        \n$\nparent\n->\nimages\n()->\nupdateExistingPivot\n(\n$\nthis\n->\nid\n,\n \n[\n\n\n            \n'position'\n \n=>\n \n$\nparent\n->\nimages\n()->\nmax\n(\n'article_image.position'\n)\n \n+\n \n1\n,\n\n\n        \n]\n)\n;\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMany to Many to Self\n\n\nI am using this term to describe a model that relates back to it self; like a project that has related projects.  You should define two relationship methods as follows:\n\n\npublic function projects() \n{\n return \n$\nthis\n->belongsToMany('Project', 'project_projects', 'project_id', 'related_project_id'); }\n\n\npublic function projectsAsChild() \n{\n return \n$\nthis\n->belongsToMany('Project', 'project_projects', 'related_project_id', 'project_id'); }\n\n\n\n\n\n\nThe \u201cAsChild()\u201d naming convention is significant.  The Decoy Base Controller checks for this when generating it\u2019s UI.\n\n\nPolymorphic relationships\n\n\nYou must use the convention of suffixing polymorphic stuff with \u201cable\u201d.  For instance, in a one to many, the child should have a \u201c\u2026able()\u201d relationship function.  For example, in a \nSlide\n controller, it should be called \nslideable()\n.\n\n\nPolymorphic Many to Many to Self\n\n\nExample:\n\n\npublic function services() \n{\n return \n$\nthis\n->morphedByMany('Service', 'serviceable', null, 'serviceable_id', 'service_id')->withTimestamps(); }\n\n\npublic function servicesAsChild() \n{\n return \n$\nthis\n->morphedByMany('Service', 'serviceable')->withTimestamps(); }\n\n\n\n\n\n\nSerialization\n\n\nModels are configured to return instances of \nBkwld\\Decoy\\Collections\\Base\n as their collection.  The \nBase\n collection adds an API that allows you to register transformations that get applied before serialization.  For instance:\n\n\nRoute::get('articles.json', function() {\n\n\n  return App\\Article::listing()->get()\n\n\n    ->serializeTransform(function(App\\Article $article) {\n\n\n      return $article->title = Str::limit($article->title, 40);\n\n\n    });\n\n\n});\n\n\n\n\n\n\nIt also adds a convenience method for registering transformations to generate crops of \nImages\n:\n\n\nRoute::get('articles.json', function() {\n\n\n  return App\\Article::listing()->get()\n\n\n    ->withDefaultImage(200)\n\n\n    ->withImage('marquee', 200, 100, ['resize'])\n\n\n    ->withRenamedImage('headshot', 'person', 300);\n\n\n});\n\n\n\n\n\n\nOr, if using paginate:\n\n\nRoute::get('articles.json', function() {\n\n\n  $result = App\\Article::listing()->paginate(6);\n\n\n  $result->getCollection()->withDefaultImage(200);\n\n\n  return $result;\n\n\n});\n\n\n\n\n\n\nThe rendered JSON will be like:\n\n\n```json\n[\n   {\n      \u201ctitle\u201d:\u201dAn article\u201d,\n      \u201cdate\u201d:\u201d2016-01-14 00:00:00\u201d,\n      \u201cimgs\u201d:{\n         \u201cdefault\u201d:{\n            \u201ctitle\u201d:\u201dStunning photo\u201d,\n            \u201clow\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-450x250.jpg?token=43280908b4ce71bfdb11ce19df95597b\u201d,\n            \u201cmedium\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-900x500.jpg?token=25981b063fa0643c876804557bba82f6\u201d,\n            \u201chigh\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-1800x1000.jpg?token=5351888634d8a5f5090ecc3a720707dc\u201d,\n            \u201cbackground_position\u201d:\u201d20% 30%\u201d\n         },\n         \u201cthumb\u201d:{\n            \u201ctitle\u201d:\u201dStunning photo\u201d,\n            \u201clow\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-100x100.jpg?token=0871b9a954c8458333929efd741c5bc8\u201d,\n            \u201cmedium\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-200x200.jpg?token=a7e997b0fd010f104172bfde0890b489\u201d,\n            \u201chigh\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-400x400.jpg?token=3883163c71c23ff6843aa8de31f65abd\u201d,\n            \u201cbackground_position\u201d:\u201d20% 30%\u201d\n         }\n      },\n      \u201curi\u201d:\u201d\\/articles\\/did-you-get-me\u201d\n   }\n]",
            "title": "Models"
        },
        {
            "location": "/models/#querying",
            "text": "Decoy adds a couple handy scopes and static methods via  Bkwld\\Decoy\\Models\\Base :   Model::ordered()  Model::findBySlugOrFail($slug)",
            "title": "Querying"
        },
        {
            "location": "/models/#visibility",
            "text": "Add a  $table->boolean('public');  column to a migration to add a \u201cpublic\u201d column that allows the admin to toggle between public and private visibility for a model.  This will automatically add the toggle UI to Decoy.  You can also use the following scopes to filter results to only public items:   Model::public()  Model::listing()  // ordered() and public()   Finally, you can call  $model->enforceVisibility()  to throw an access denied error if the user doesn\u2019t have permission to view a model.  This is called automatically by  findBySlugOrFail() .",
            "title": "Visibility"
        },
        {
            "location": "/models/#relationships",
            "text": "",
            "title": "Relationships"
        },
        {
            "location": "/models/#many-to-many-relationships",
            "text": "Decoy expects you to name your relationships after the model/table. So a post with many images should have an \u201cimages\u201d relationship defined.  Since we typically add timestamps to pivot tables, you\u2019ll want to call  withTimestamps  on relationships.  And, if the pivot rows should be sortable, you\u2019l need to use  withPivot('position')  so that the position value gets rendered to the listing table.  Additionally, the easiest way to have Decoy sort by position in the admin is to add that  orderBy  clause to the relationships as well.  So your full relationship function may look like (don\u2019t forget that both models in the relationship need to be defined):  public function images()  {  return  $ this ->belongsToMany('Image')->withTimestamps()->withPivot('position')->orderBy('article_image.position'); }   Here is an example of how you can set the  position  column to the  MAX  value, putting the attached record at the end, by using an event callback on the Model that gets attached:  /**   * When attached as a related set the position on the pivot column to the end   *   * @param  Illuminate\\Database\\Eloquent\\Model   * @return void   */ \npublic   function   onAttached ( $ parent )   {       if   ( get_class ( $ parent )   ==   'Article' )   {           $ parent -> images ()-> updateExistingPivot ( $ this -> id ,   [               'position'   =>   $ parent -> images ()-> max ( 'article_image.position' )   +   1 ,           ] ) ;       }  }",
            "title": "Many to Many relationships"
        },
        {
            "location": "/models/#many-to-many-to-self",
            "text": "I am using this term to describe a model that relates back to it self; like a project that has related projects.  You should define two relationship methods as follows:  public function projects()  {  return  $ this ->belongsToMany('Project', 'project_projects', 'project_id', 'related_project_id'); }  public function projectsAsChild()  {  return  $ this ->belongsToMany('Project', 'project_projects', 'related_project_id', 'project_id'); }   The \u201cAsChild()\u201d naming convention is significant.  The Decoy Base Controller checks for this when generating it\u2019s UI.",
            "title": "Many to Many to Self"
        },
        {
            "location": "/models/#polymorphic-relationships",
            "text": "You must use the convention of suffixing polymorphic stuff with \u201cable\u201d.  For instance, in a one to many, the child should have a \u201c\u2026able()\u201d relationship function.  For example, in a  Slide  controller, it should be called  slideable() .",
            "title": "Polymorphic relationships"
        },
        {
            "location": "/models/#polymorphic-many-to-many-to-self",
            "text": "Example:  public function services()  {  return  $ this ->morphedByMany('Service', 'serviceable', null, 'serviceable_id', 'service_id')->withTimestamps(); }  public function servicesAsChild()  {  return  $ this ->morphedByMany('Service', 'serviceable')->withTimestamps(); }",
            "title": "Polymorphic Many to Many to Self"
        },
        {
            "location": "/models/#serialization",
            "text": "Models are configured to return instances of  Bkwld\\Decoy\\Collections\\Base  as their collection.  The  Base  collection adds an API that allows you to register transformations that get applied before serialization.  For instance:  Route::get('articles.json', function() {    return App\\Article::listing()->get()      ->serializeTransform(function(App\\Article $article) {        return $article->title = Str::limit($article->title, 40);      });  });   It also adds a convenience method for registering transformations to generate crops of  Images :  Route::get('articles.json', function() {    return App\\Article::listing()->get()      ->withDefaultImage(200)      ->withImage('marquee', 200, 100, ['resize'])      ->withRenamedImage('headshot', 'person', 300);  });   Or, if using paginate:  Route::get('articles.json', function() {    $result = App\\Article::listing()->paginate(6);    $result->getCollection()->withDefaultImage(200);    return $result;  });   The rendered JSON will be like:  ```json\n[\n   {\n      \u201ctitle\u201d:\u201dAn article\u201d,\n      \u201cdate\u201d:\u201d2016-01-14 00:00:00\u201d,\n      \u201cimgs\u201d:{\n         \u201cdefault\u201d:{\n            \u201ctitle\u201d:\u201dStunning photo\u201d,\n            \u201clow\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-450x250.jpg?token=43280908b4ce71bfdb11ce19df95597b\u201d,\n            \u201cmedium\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-900x500.jpg?token=25981b063fa0643c876804557bba82f6\u201d,\n            \u201chigh\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-1800x1000.jpg?token=5351888634d8a5f5090ecc3a720707dc\u201d,\n            \u201cbackground_position\u201d:\u201d20% 30%\u201d\n         },\n         \u201cthumb\u201d:{\n            \u201ctitle\u201d:\u201dStunning photo\u201d,\n            \u201clow\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-100x100.jpg?token=0871b9a954c8458333929efd741c5bc8\u201d,\n            \u201cmedium\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-200x200.jpg?token=a7e997b0fd010f104172bfde0890b489\u201d,\n            \u201chigh\u201d:\u201d\\/uploads\\/07\\/12\\/Photo_on_6-13-15_at_6.08_AM-400x400.jpg?token=3883163c71c23ff6843aa8de31f65abd\u201d,\n            \u201cbackground_position\u201d:\u201d20% 30%\u201d\n         }\n      },\n      \u201curi\u201d:\u201d\\/articles\\/did-you-get-me\u201d\n   }\n]",
            "title": "Serialization"
        },
        {
            "location": "/views/",
            "text": "Admin views are stored in /app/views/admin/CONTROLLER where \u201cCONTROLLER\u201d is the lowercased controller name (i.e. \u201carticles\u201d, \u201cphotos\u201d).  For each admin controller, you need to have at least an \u201cedit.php\u201d file in that directory (i.e. /app/views/admin/articles/edit.php).  This file contains a form used for both the /create and /edit routes.\n\n\nGrouping form fields\n\n\nUse a \nfieldset\n and a div of class \n.legend\n to contain groups of fields in box.  For instance:\n\n\n!=\n \nView\n::\nmake\n(\n'\ndecoy\n::\nshared\n.\nform\n.\n_header\n'\n,\n \n$__data\n)\n->\nrender\n()\n\n\n%fieldset\n\n    \n.\nlegend\n=\nempty\n(\n$item\n)\n?\n'\nNew\n':'\nEdit\n'\n\n    \n!=\n \nFormer\n::\ntext\n(\n'\ntitle\n'\n)\n\n    \n!=\n \nFormer\n::\ntextarea\n(\n'\nbody\n'\n)\n\n\n\n\n\n\nOverriding a Decoy partial\n\n\nYou can override any of the Decoy partials on a per-controller basis.  This is done by creating a file structure within a controller\u2019s views directory that matches the decoy views structure.  Any mirrored path will be used in place of the Decoy partial.  For instance, if you create a file at app/views/admin/articles/shared/_pagination.php you can customize the pagination partial JUST for the articles controller.\n\n\nIn addition, you can override a partial for ALL controllers through built in \nLaravel functionality\n.\n\n\nSidebar\n\n\nThe sidebar is primarily designed to house related model listings but you can actually store anything in it.  Add items to the Sidebar by calling \n$sidebar->add('Content')\n from the view.  For instance:\n\n\n- $sidebar->add(Former::listing('Contributor')->take(30))\n- $sidebar->add('\n<p>\nA paragraph\n</p>\n')\n\n\n\n\n\nNote: This must be run \nbefore\n the include of the \ndecoy::shared.form._header\n partial.\n\n\nEmbeded / inline relationship list\n\n\nA standard list (like seen on index views) can be embedded in form like:\n\n\n!= Former::listing('Faqs')->layout('form')->take(100)\n\n\n\n\n\nSee the documentation under Form Fields for the full API of \nlisting()\n.\n\n\nData for Former select, radio, and checkbox\n\n\nA convention to follow is to create a static array on the model that populates Former\u2019s select, radio, and checkbox types.  The name of the property holding this array should be the plural form of the column that will store the value(s).  The keys of this array are slugs that are stored in a database column and the values are the readable vesions.  For instance:\n\n\nstatic public \n$\ncategories\n = array(\n\n\n    'inspiring' => 'Inspiring',\n\n\n    'quirky' => 'Quirky',\n\n\n    'cool' => 'Cool',\n\n\n    'adventurous' => 'Adventurous',\n\n\n);\n\n\n\n\n\n\nThen, in the edit view, you could do this:\n\n\n!= Former::checkbox('category')->checkboxes(Bkwld\\Library\\Laravel\\Former::checkboxArray('category', Post::\n$\ncategories\n))->push(false)\n\n\n\n\n\n\nFurthermore, you can use this array for searching the list view by referencing it in the \nsearch\n property on your controller:\n\n\nprotected \n$\nsearch\n = array(\n\n\n    'title',\n\n\n    'category' => array(\n\n\n        'type' => 'select',\n\n\n        'options' => 'Post::\n$\ncategories\n'\n\n\n    ),\n\n\n);\n\n\n\n\n\n\nFinally, there is some automatic logic on the list table that will take the values from that column (if specified in the controller \ncolumns\n property) and translate it using the static array, assuming you named it to be the plural of the column.\n\n\nToggleable fields\n\n\nThe \nauto-toggleable\n JS module applies some JS to forms that will allow you to define fields that hide and show based on clicks on \u201ctrigger\u201d elements.  For example:\n\n\n!=\n \nFormer\n::\nradios\n(\n'type'\n)\n->\nradios\n(\nBkwld\n\\\nLibrary\n\\\nLaravel\n\\\nFormer\n::\nradioArray\n(\nArticle\n::\n$types\n))\n->\ndataToggleable\n(\n'type'\n)\n\n\n!=\n \nFormer\n::\ntext\n(\n'title'\n)\n\n\n!=\n \nFormer\n::\nwysiwyg\n(\n'body'\n)\n->\ndataShowWhenType\n(\n'internal'\n)\n\n\n!=\n \nFormer\n::\nimage\n(\n'image'\n)\n->\ndataShowWhenType\n(\n'internal'\n)\n\n\n!=\n \nFormer\n::\ntext\n(\n'url'\n,\n \n\"URL\"\n)\n->\ndataShowWhenType\n(\n'external'\n)\n\n\n\n\n\n\nNested, related models\n\n\nYou can edit a child model in the context of it\u2019s parent Through special naming conventions.  Take the following form for example:\n\n\n!=\n \nFormer\n::\ntext\n(\n'title'\n)\n\n\n!=\n \nFormer\n::\ntext\n(\n'_author[2][name]'\n)\n\n\n\n\n\n\nWhen this form submits, Decoy will update the \ntitle\n attribute of the model like normal, but will also look up \n$model->author()->find(2)\n and set the \nname\n attribute on it to whatever was in the form.",
            "title": "Views"
        },
        {
            "location": "/views/#grouping-form-fields",
            "text": "Use a  fieldset  and a div of class  .legend  to contain groups of fields in box.  For instance:  !=   View :: make ( ' decoy :: shared . form . _header ' ,   $__data ) -> render ()  %fieldset \n     . legend = empty ( $item ) ? ' New ':' Edit ' \n     !=   Former :: text ( ' title ' ) \n     !=   Former :: textarea ( ' body ' )",
            "title": "Grouping form fields"
        },
        {
            "location": "/views/#overriding-a-decoy-partial",
            "text": "You can override any of the Decoy partials on a per-controller basis.  This is done by creating a file structure within a controller\u2019s views directory that matches the decoy views structure.  Any mirrored path will be used in place of the Decoy partial.  For instance, if you create a file at app/views/admin/articles/shared/_pagination.php you can customize the pagination partial JUST for the articles controller.  In addition, you can override a partial for ALL controllers through built in  Laravel functionality .",
            "title": "Overriding a Decoy partial"
        },
        {
            "location": "/views/#sidebar",
            "text": "The sidebar is primarily designed to house related model listings but you can actually store anything in it.  Add items to the Sidebar by calling  $sidebar->add('Content')  from the view.  For instance:  - $sidebar->add(Former::listing('Contributor')->take(30))\n- $sidebar->add(' <p> A paragraph </p> ')  Note: This must be run  before  the include of the  decoy::shared.form._header  partial.",
            "title": "Sidebar"
        },
        {
            "location": "/views/#embeded-inline-relationship-list",
            "text": "A standard list (like seen on index views) can be embedded in form like:  != Former::listing('Faqs')->layout('form')->take(100)  See the documentation under Form Fields for the full API of  listing() .",
            "title": "Embeded / inline relationship list"
        },
        {
            "location": "/views/#data-for-former-select-radio-and-checkbox",
            "text": "A convention to follow is to create a static array on the model that populates Former\u2019s select, radio, and checkbox types.  The name of the property holding this array should be the plural form of the column that will store the value(s).  The keys of this array are slugs that are stored in a database column and the values are the readable vesions.  For instance:  static public  $ categories  = array(      'inspiring' => 'Inspiring',      'quirky' => 'Quirky',      'cool' => 'Cool',      'adventurous' => 'Adventurous',  );   Then, in the edit view, you could do this:  != Former::checkbox('category')->checkboxes(Bkwld\\Library\\Laravel\\Former::checkboxArray('category', Post:: $ categories ))->push(false)   Furthermore, you can use this array for searching the list view by referencing it in the  search  property on your controller:  protected  $ search  = array(      'title',      'category' => array(          'type' => 'select',          'options' => 'Post:: $ categories '      ),  );   Finally, there is some automatic logic on the list table that will take the values from that column (if specified in the controller  columns  property) and translate it using the static array, assuming you named it to be the plural of the column.",
            "title": "Data for Former select, radio, and checkbox"
        },
        {
            "location": "/views/#toggleable-fields",
            "text": "The  auto-toggleable  JS module applies some JS to forms that will allow you to define fields that hide and show based on clicks on \u201ctrigger\u201d elements.  For example:  !=   Former :: radios ( 'type' ) -> radios ( Bkwld \\ Library \\ Laravel \\ Former :: radioArray ( Article :: $types )) -> dataToggleable ( 'type' )  !=   Former :: text ( 'title' )  !=   Former :: wysiwyg ( 'body' ) -> dataShowWhenType ( 'internal' )  !=   Former :: image ( 'image' ) -> dataShowWhenType ( 'internal' )  !=   Former :: text ( 'url' ,   \"URL\" ) -> dataShowWhenType ( 'external' )",
            "title": "Toggleable fields"
        },
        {
            "location": "/views/#nested-related-models",
            "text": "You can edit a child model in the context of it\u2019s parent Through special naming conventions.  Take the following form for example:  !=   Former :: text ( 'title' )  !=   Former :: text ( '_author[2][name]' )   When this form submits, Decoy will update the  title  attribute of the model like normal, but will also look up  $model->author()->find(2)  and set the  name  attribute on it to whatever was in the form.",
            "title": "Nested, related models"
        },
        {
            "location": "/controllers/",
            "text": "A lot of Decoy\u2019s \u201cmagic\u201d comes by having your admin controllers extend the \nBkwld\\Decoy\\Controllers\\Base\n.  I typically have the admin controllers extend an application specific base controller (i.e. \nAdmin\\BaseController\n) which then extends the \nBkwld\\Decoy\\Controllers\\Base\n.\n\n\nProtected properties\n\n\nThe following protected proprties allow you to customize how Decoy works from the parent controller without overriding whole restful methods.  They generally affect the behavior of multiple methods.  They are all named with all-caps to indicate their significance and to differentiate them from other properties you might set in your admin controller.\n\n\n\n\nmodel\n - The name of the controller associated with the controller.  For instance, \u201cClient\u201d in the examples above.  If left undefined, it\u2019s generated in the constructor based on the singular form of the controller name.  In addition, the constructor defines a class_alias of \nModel\n that you can use to refer to the model.  For instance, in a \u201cClients\u201d controller, you could write \nModel::find(2)\n instead of \nClient::find(2)\n.\n\n\ncontroller\n - The \u201cpath\u201d, in Laravel terms, of the controller (i.e. \u201cadmin.clients\u201d).  If left undefined, it\u2019s generated in the constructor from the controller class name.\n\n\ntitle\n - The title used for the pages generated by the controller. If left undefined, it\u2019s generated in the constructor from the controller class name.\n\n\ndescription\n - An optional sentenance or two that is displayed with the title in the header of the page.\n\n\ncolumns\n - An array of key value pairs used to describe what table columns to have in the listing view.  The default is: \narray('Title' => 'title')\n.  The key is the label of the column, shown in the header of the table.  The value is the source for the data for the column.  Decoy first checks if there is a method defined on the model with the value and, if so, executes it to return the value.  If there is no method, it checks to see if the model has a property (or dynamic property) with that name and uses it\u2019s value of it does.  Finally, if none of those cases are true, it will use the value literally, rendering it in every row of the table.  Note: the default value, \ntitle\n, is the name of a method defined in \nDecoy\\Base_Model\n.\n\n\nshow_view\n - The path, in the Laravel format, to the view for the new/edit view.  I.e. \u2018admin.news.show\u2019.\n\n\n\n\nsearch\n - A multidimensional associative array that tells Decoy what fields to make available to the search on index views.  It expects data like:\n\n\n```\narray(\n\n\n// 'title' column assumed to be a text type\n\n\n'title',\n\n\n\n// Label auto generated from field name\n\n\n'description' => 'text',\n\n\n\n// Most explicit way to define a text field\n\n\n'body' => array(\n\n\n    'type' => 'text',\n\n\n    'label' => 'Body',\n\n\n)\n\n\n\n// Creates a pulldown menu\n\n\n'type' => array(\n\n\n    'type' => 'select',\n\n\n    'options' => array(\n\n\n        'photo' => 'Photo',\n\n\n        'video' => 'Video',\n\n\n    ),\n\n\n),\n\n\n\n// Creates a pulldowon using static array on Post model\n\n\n'category' => array(\n\n\n    'type' => 'select',\n\n\n    'options' => 'Post::\n$\ncategories\n'\n\n\n),\n\n\n\n// Numeric input field\n\n\n'like_count' => array(\n\n\n    'type' => 'number',\n\n\n    'label' => 'Like total',\n\n\n\n    // Call the static method `likeCountSearch`() on the `Admin\\SomeController`\n\n\n    // class to override the query for the like_count field\n\n\n    'query' => 'Admin\\SomeController::likeCountSearch'\n\n\n),\n\n\n\n// Date input field\n\n\n'created_at' => 'date',\n\n\n\n\n\n\n);\n```\n\n\n\n\n\n\nSeveral of these properties have accessor functions that can be overrode by subclasses.  This has the advantage of allowing you to generate the configuration programatically or to use closures in the configuration.  For instance:\n\n\n```\n\n\nclass\n \nArticlesController\n \n{\n\n\n    \n//\n \nSupport\n \na\n \ndatabase\n \n\"SET\"\n \ntype\n \ncolumn\n \nin\n \nsearches\n\n    \npublic\n \nfunction\n \nsearch\n()\n \n{\n\n        \nreturn\n \n[\n\n            \n'type'\n \n=>\n \n[\n\n                \n'type'\n \n=>\n \n'select'\n,\n\n                \n'options'\n \n=>\n \n'Article::$types'\n,\n\n\n                \n// Any search type supports the `query` parameter for change how the\n\n                \n// field input is applied to the search query\n\n                \n'query'\n \n=>\n \nfunction\n(\n$query\n,\n \n$condition\n,\n \n$input\n)\n \n{\n\n                    \n$type\n \n=\n \nDB\n::connection\n()\n->\ngetPdo\n()\n->\nquote\n(\n$type\n);\n\n                    \n$query\n->\nwhereRaw\n(\n'FIND_IN_SET('\n.\n$type.\n', articles.type)'\n);\n\n                \n},\n\n            \n]\n,\n\n        \n];\n\n    \n}\n\n\n    \n//\n \nOther\n \naccessor\n \nfunctions\n\n    \npublic\n \nfunction\n \ndescription\n()\n \n{\n \nreturn\n \n''\n;\n \n}\n\n    \npublic\n \nfunction\n \ncolumns\n()\n \n{\n \nreturn\n \n[]\n;\n \n}\n\n\n}\n\n\n```\n\n\n\n\n\n\nThe following properties are only relevant if a controller is a parent or child of another, as in \nhasMany()\n, \nbelongsToMany()\n, etc.  You can typically use Decoy\u2019s default values for these (which are deduced from the \nnav\n Config property).\n\n\n\n\nparent_model\n - The model used by the parent controller (i.e. \u201cProject\u201d).\n\n\nparent_controller\n - The parent controller (i.e. \u201cadmin.projects\u201d).\n\n\nparent_to_self\n - The name of the relationship on the parent controller\u2019s model that refers to it\u2019s child (AKA the \ncurrent\n controller\u2019s model, i.e. for \u201cadmin.projects\u201d it would be \u201cprojects\u201d).\n\n\nself_to_parent\n - The name of the relationship on the controller\u2019s model that refers to it\u2019s parent (i.e. for \u201cadmin.projects\u201d it would be \u201cclient\u201d).",
            "title": "Controllers"
        },
        {
            "location": "/controllers/#protected-properties",
            "text": "The following protected proprties allow you to customize how Decoy works from the parent controller without overriding whole restful methods.  They generally affect the behavior of multiple methods.  They are all named with all-caps to indicate their significance and to differentiate them from other properties you might set in your admin controller.   model  - The name of the controller associated with the controller.  For instance, \u201cClient\u201d in the examples above.  If left undefined, it\u2019s generated in the constructor based on the singular form of the controller name.  In addition, the constructor defines a class_alias of  Model  that you can use to refer to the model.  For instance, in a \u201cClients\u201d controller, you could write  Model::find(2)  instead of  Client::find(2) .  controller  - The \u201cpath\u201d, in Laravel terms, of the controller (i.e. \u201cadmin.clients\u201d).  If left undefined, it\u2019s generated in the constructor from the controller class name.  title  - The title used for the pages generated by the controller. If left undefined, it\u2019s generated in the constructor from the controller class name.  description  - An optional sentenance or two that is displayed with the title in the header of the page.  columns  - An array of key value pairs used to describe what table columns to have in the listing view.  The default is:  array('Title' => 'title') .  The key is the label of the column, shown in the header of the table.  The value is the source for the data for the column.  Decoy first checks if there is a method defined on the model with the value and, if so, executes it to return the value.  If there is no method, it checks to see if the model has a property (or dynamic property) with that name and uses it\u2019s value of it does.  Finally, if none of those cases are true, it will use the value literally, rendering it in every row of the table.  Note: the default value,  title , is the name of a method defined in  Decoy\\Base_Model .  show_view  - The path, in the Laravel format, to the view for the new/edit view.  I.e. \u2018admin.news.show\u2019.   search  - A multidimensional associative array that tells Decoy what fields to make available to the search on index views.  It expects data like:  ```\narray(  // 'title' column assumed to be a text type  'title',  // Label auto generated from field name  'description' => 'text',  // Most explicit way to define a text field  'body' => array(      'type' => 'text',      'label' => 'Body',  )  // Creates a pulldown menu  'type' => array(      'type' => 'select',      'options' => array(          'photo' => 'Photo',          'video' => 'Video',      ),  ),  // Creates a pulldowon using static array on Post model  'category' => array(      'type' => 'select',      'options' => 'Post:: $ categories '  ),  // Numeric input field  'like_count' => array(      'type' => 'number',      'label' => 'Like total',      // Call the static method `likeCountSearch`() on the `Admin\\SomeController`      // class to override the query for the like_count field      'query' => 'Admin\\SomeController::likeCountSearch'  ),  // Date input field  'created_at' => 'date',   );\n```    Several of these properties have accessor functions that can be overrode by subclasses.  This has the advantage of allowing you to generate the configuration programatically or to use closures in the configuration.  For instance:  ```  class   ArticlesController   { \n\n     //   Support   a   database   \"SET\"   type   column   in   searches \n     public   function   search ()   { \n         return   [ \n             'type'   =>   [ \n                 'type'   =>   'select' , \n                 'options'   =>   'Article::$types' , \n\n                 // Any search type supports the `query` parameter for change how the \n                 // field input is applied to the search query \n                 'query'   =>   function ( $query ,   $condition ,   $input )   { \n                     $type   =   DB ::connection () -> getPdo () -> quote ( $type ); \n                     $query -> whereRaw ( 'FIND_IN_SET(' . $type. ', articles.type)' ); \n                 }, \n             ] , \n         ]; \n     } \n\n     //   Other   accessor   functions \n     public   function   description ()   {   return   '' ;   } \n     public   function   columns ()   {   return   [] ;   }  }  ```   The following properties are only relevant if a controller is a parent or child of another, as in  hasMany() ,  belongsToMany() , etc.  You can typically use Decoy\u2019s default values for these (which are deduced from the  nav  Config property).   parent_model  - The model used by the parent controller (i.e. \u201cProject\u201d).  parent_controller  - The parent controller (i.e. \u201cadmin.projects\u201d).  parent_to_self  - The name of the relationship on the parent controller\u2019s model that refers to it\u2019s child (AKA the  current  controller\u2019s model, i.e. for \u201cadmin.projects\u201d it would be \u201cprojects\u201d).  self_to_parent  - The name of the relationship on the controller\u2019s model that refers to it\u2019s parent (i.e. for \u201cadmin.projects\u201d it would be \u201cclient\u201d).",
            "title": "Protected properties"
        },
        {
            "location": "/custom_form_fields/",
            "text": "The following additional fields come with Decoy.  They are implemented through Former so you can chain any of the standard Former method calls onto them like \u201cblockhelp\u201d, etc.\n\n\nDate\n\n\n\n\n\n\nFormer::date()\n\n\n\n\nCreate a \ncalendar widget\n.\n\n\nUses \nbootstrap-datepicker\n for the UI. If you set the value to \n'now'\n, the current date will populate the field``\n!= Former::date('date', 'Start date')->value('now'`\n\n\n\n\n\n\n\n\n\n\n\n\n\nTime\n\n\n\n\n\n\nFormer::time()\n\n\n\n\nCreate a time \nselector widget\n.\n\n\nUses \nbootstrap-timepicker\n for the UI. If you set the value to \n'now'\n, the current date will populate the field.\n!= Former::time('time')->value('now')\n\n\n\n\n\n\n\n\n\n\n\n\n\nDateTime\n\n\n\n\n\n\nFormer::datetime()\n\n\n\n\nCreate a \ndate-time widget\n, which is like the concatenation of the \ndate()\n and \ntime()\n elements.\n\n\nYou can set attributes of the date and time inputs, respectively, by chaining \n->date($attributes)\n and \n->time($attributes)\n where $attributes is an associative array.\n\n\nTo access the Former \nField\n instances for each field, access the public properties \n$date\n and \n$time\n.\n!= Former::datetime('when')->date(array('data-example', 'Hey'))->value('now')\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nFormer::note()\n\n\n\n\nA note field has no actual input elements.  It\u2019s a control group with just the passed html value where the inputs would be.\n!= Former::note('Creator', \n$\nauthor\n->name)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWysiwyg\n\n\n\n\n\n\nFormer::wysiwyg()\n\n\n\n\nCreate a textarea that will be wrapped in a WYSIWYG editor by Decoy JS.\n!= Former::wysiwyg('body')\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpload\n\n\n\n\n\n\nFormer::upload()\n\n\n\n\nCreates a \nfile upload field\n with addtional UI for reviewing the last upload and deleting it.\n!= Former::upload('file')\n\n\n\n\n\n\n\n\n\n\n\n\n\nImage\n\n\n\n\n\n\nFormer::image()\n\n\n\n\nCreates an image upload with additional UI for reviewing the last upload, cropping it, setting the focal point, entering a title, and deleting it.\n\n\nSpecify aspect ratio fro cropping tool with \naspect(number)\n\n\nAdd focal point selection UI by chaining \naddFocalPoint()\n!= Former::image('image', 'Profile image')->aspect(16/9)->addFocalPoint()\n\n\n\n\n\n\n\n\n\n\n\n\n\nVideo Encoder\n\n\n\n\n\n\nFormer::videoEncoder()\n\n\n\n\nCreates a \nvideo upload field\n with addtional UI for checking the progress of the encoding and then playing back the video.\n\n\nReview the feature on Encoding from this doc for more information on the setup of the video encoding feature of Decoy.\n!= Former::videoEncoder('video')\n\n\n\n\n\n\n\n\n\n\n\n\n\nBelongs To\n\n\n\n\n\n\nFormer::belongsTo()\n\n\n\n\nCreates an \nautocomplete field\n that populates a foreign key in a belongs to relationship.\n\n\nYou must chain either \nroute($route)\n or \nparent($model)\n to provide the route that can be AJAX GET requested to serve data to the autocomplete.\n\n\nIf you want to prepopulate, chain, for example, \n->value(2)->title(\"Example\")\n.\n!= Former::belongsTo('related_product_id', 'Related product')->route('/admin/products')\n!= Former::belongsTo('related_product_id', 'Related product')->parent(App\\Project::class)\n!= Former::belongsTo('author_id', 'Author')->route('/admin/admins')->value(app('decoy.user')->id)->title(app('decoy.user')->getAdminTitleAttribute())\n\n\n\n\n\n\n\n\n\n\n\n\n\nMany To Many Checklist\n\n\n\n\n\n\nFormer::manyToManyChecklist()\n\n\n\n\nRender a \nlist of checkboxes\n to represent a related many-to-many table.  The underlying Former field \ntype\n is a checkbox.\n\n\nThe relationship name is stored in the field \nname\n.  This is the name of the relationship method that is defined on the model that is currently being edited in Decoy.\n\n\nYou may adjust the query that fetches related objects by passing a \ncallable\n to \nscope()\n which will recieve the query (an \nIlluminate\\Database\\Eloquent\\Builder\n instance) as it\u2019s first argument.\n\n\nYou can display the results in two columns rather than one by chaining \naddGroupClass('two-col')\n\n\nYou can chain \ndecorator($callable)\n to pass a function that recieves each checkboxes HTML and model instance and expects you to return transformed HTML for the checkbox.\n:php\n\n    \necho\n \nFormer\n:\n:manyToManyChecklist\n(\n'hubs'\n)\n\n        \n-\n>\nscope\n(\nfunction\n($\nquery\n)\n \nuse\n \n($\nproduct\n)\n \n{\n\n            \nreturn\n \n$\nquery\n->\nwhere\n(\n'product_id'\n,\n \n'='\n,\n \n$\nproduct\n->\nid\n);\n\n        \n}\n)\n-\n>\ndecorator\n(\nfunction\n($\nhtml\n,\n \n$\nmodel\n)\n \n{\n\n            \nreturn\n \n$\nhtml\n.\nForm\n::\nhidden\n(\n'key'\n,\n \n'val'\n);\n\n        \n}\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nListing\n\n\n\n\n\n\nFormer::listing()\n\n\n\n\nCreates an table of model instances like shown in Decoy\u2019s index view.  The \nname\n for the field should be the model class that is being rendered.  Like \nArticle\n.\n\n\ncontroller()\n specifies the controller name if it can\u2019t be automatically determined.  You may also pass it an instance of a controller class.\n\n\nitems()\n stores a collection of model instances to display in the list.  This is optional, \nlisting()\n will try and make a query using the model name to form a query.\n\n\nlayout()\n allows you to specify the layout.  This is automatically set when passing a \nListing\n instance to \n$sidebar->add()\n from a view.\n\n\nfull\n - A full width view like shown on Decoy\u2019s index view.\n\n\nsidebar\n - A narrow view like shown in an edit view\u2019s related column.\n\n\nform\n - A full width view designed to be show in a horizontal form.\n\n\n\n\n\n\ntake()\n - A integer; how many rows to display.\n\n\nscope()\n - You may adjust the query that fetches related objects by passing a \ncallable\n to \nscope()\n which will recieve the query (an \nIlluminate\\Database\\Eloquent\\Builder\n instance) as it\u2019s first argument.\n!= Former::listing('Author')->take(30)->layout('form')",
            "title": "Custom Form Fields"
        },
        {
            "location": "/custom_form_fields/#date",
            "text": "Former::date()   Create a  calendar widget .  Uses  bootstrap-datepicker  for the UI. If you set the value to  'now' , the current date will populate the field`` != Former::date('date', 'Start date')->value('now'`",
            "title": "Date"
        },
        {
            "location": "/custom_form_fields/#time",
            "text": "Former::time()   Create a time  selector widget .  Uses  bootstrap-timepicker  for the UI. If you set the value to  'now' , the current date will populate the field. != Former::time('time')->value('now')",
            "title": "Time"
        },
        {
            "location": "/custom_form_fields/#datetime",
            "text": "Former::datetime()   Create a  date-time widget , which is like the concatenation of the  date()  and  time()  elements.  You can set attributes of the date and time inputs, respectively, by chaining  ->date($attributes)  and  ->time($attributes)  where $attributes is an associative array.  To access the Former  Field  instances for each field, access the public properties  $date  and  $time . != Former::datetime('when')->date(array('data-example', 'Hey'))->value('now')",
            "title": "DateTime"
        },
        {
            "location": "/custom_form_fields/#note",
            "text": "Former::note()   A note field has no actual input elements.  It\u2019s a control group with just the passed html value where the inputs would be. != Former::note('Creator',  $ author ->name)",
            "title": "Note"
        },
        {
            "location": "/custom_form_fields/#wysiwyg",
            "text": "Former::wysiwyg()   Create a textarea that will be wrapped in a WYSIWYG editor by Decoy JS. != Former::wysiwyg('body')",
            "title": "Wysiwyg"
        },
        {
            "location": "/custom_form_fields/#upload",
            "text": "Former::upload()   Creates a  file upload field  with addtional UI for reviewing the last upload and deleting it. != Former::upload('file')",
            "title": "Upload"
        },
        {
            "location": "/custom_form_fields/#image",
            "text": "Former::image()   Creates an image upload with additional UI for reviewing the last upload, cropping it, setting the focal point, entering a title, and deleting it.  Specify aspect ratio fro cropping tool with  aspect(number)  Add focal point selection UI by chaining  addFocalPoint() != Former::image('image', 'Profile image')->aspect(16/9)->addFocalPoint()",
            "title": "Image"
        },
        {
            "location": "/custom_form_fields/#video-encoder",
            "text": "Former::videoEncoder()   Creates a  video upload field  with addtional UI for checking the progress of the encoding and then playing back the video.  Review the feature on Encoding from this doc for more information on the setup of the video encoding feature of Decoy. != Former::videoEncoder('video')",
            "title": "Video Encoder"
        },
        {
            "location": "/custom_form_fields/#belongs-to",
            "text": "Former::belongsTo()   Creates an  autocomplete field  that populates a foreign key in a belongs to relationship.  You must chain either  route($route)  or  parent($model)  to provide the route that can be AJAX GET requested to serve data to the autocomplete.  If you want to prepopulate, chain, for example,  ->value(2)->title(\"Example\") . != Former::belongsTo('related_product_id', 'Related product')->route('/admin/products')\n!= Former::belongsTo('related_product_id', 'Related product')->parent(App\\Project::class)\n!= Former::belongsTo('author_id', 'Author')->route('/admin/admins')->value(app('decoy.user')->id)->title(app('decoy.user')->getAdminTitleAttribute())",
            "title": "Belongs To"
        },
        {
            "location": "/custom_form_fields/#many-to-many-checklist",
            "text": "Former::manyToManyChecklist()   Render a  list of checkboxes  to represent a related many-to-many table.  The underlying Former field  type  is a checkbox.  The relationship name is stored in the field  name .  This is the name of the relationship method that is defined on the model that is currently being edited in Decoy.  You may adjust the query that fetches related objects by passing a  callable  to  scope()  which will recieve the query (an  Illuminate\\Database\\Eloquent\\Builder  instance) as it\u2019s first argument.  You can display the results in two columns rather than one by chaining  addGroupClass('two-col')  You can chain  decorator($callable)  to pass a function that recieves each checkboxes HTML and model instance and expects you to return transformed HTML for the checkbox. :php \n     echo   Former : :manyToManyChecklist ( 'hubs' ) \n         - > scope ( function ($ query )   use   ($ product )   { \n             return   $ query -> where ( 'product_id' ,   '=' ,   $ product -> id ); \n         } ) - > decorator ( function ($ html ,   $ model )   { \n             return   $ html . Form :: hidden ( 'key' ,   'val' ); \n         } );",
            "title": "Many To Many Checklist"
        },
        {
            "location": "/custom_form_fields/#listing",
            "text": "Former::listing()   Creates an table of model instances like shown in Decoy\u2019s index view.  The  name  for the field should be the model class that is being rendered.  Like  Article .  controller()  specifies the controller name if it can\u2019t be automatically determined.  You may also pass it an instance of a controller class.  items()  stores a collection of model instances to display in the list.  This is optional,  listing()  will try and make a query using the model name to form a query.  layout()  allows you to specify the layout.  This is automatically set when passing a  Listing  instance to  $sidebar->add()  from a view.  full  - A full width view like shown on Decoy\u2019s index view.  sidebar  - A narrow view like shown in an edit view\u2019s related column.  form  - A full width view designed to be show in a horizontal form.    take()  - A integer; how many rows to display.  scope()  - You may adjust the query that fetches related objects by passing a  callable  to  scope()  which will recieve the query (an  Illuminate\\Database\\Eloquent\\Builder  instance) as it\u2019s first argument. != Former::listing('Author')->take(30)->layout('form')",
            "title": "Listing"
        },
        {
            "location": "/elements/",
            "text": "Copy, images, and files that aren\u2019t managed as part of an item in a list.  If content needs to be managed and a model doesn\u2019t make sense, use Elements.\n\n\nSetup\n\n\nBegin by customizing the \nconfig/decoy/elements.yaml\n file that will have been published during the Decoy installation.  Roughly speaking, there are 3 nested layers of hashes that configure elements:\n\n\n\n\nA page\n\n\nA section\n\n\nA field\n\n\n\n\n\n\n\n\n\n\n\n\nThe syntax has a terse form:\n\n\nhomepage\n:\n\n    \nmarquee\n:\n\n        \nimage\n,\nimage\n:\n \n/img/temp/\nhome\n-\nmarquee\n.\njpg\n\n\n\n\n\n\nAnd an expanded form:\n\n\nhomepage\n:\n\n    \nlabel\n:\n \nThe\n \nhomepage\n\n    \nhelp\n:\n \nThis\n \nis\n \nthe\n \nsite\n \nhomepage\n\n    \nsections\n:\n\n        \nmarquee\n:\n\n            \nlabel\n:\n \nHome\n \nmarquee\n\n            \nhelp\n:\n \nThe\n \nfeatured\n \nimage\n \nsection\n \non\n \nthe\n \ntop\n \nof\n \nhomepage\n\n            \nfields\n:\n\n                \nimage\n:\n\n                    \ntype\n:\n \nimage\n\n                    \nlabel\n:\n \nAn\n \nimage\n\n                    \nvalue\n:\n \n/img/temp/\nhome\n-\nmarquee\n.\njpg\n\n\n\n\n\n\nThe two forms can be intermixed. Check out the \nelements.yaml\n file for more examples.\n\n\nAlternatively, you can create a directory at \nconfig/decoy/elements\n and create many different *.yaml files within there. They all share the same syntax as the main \nelements.yaml\n and get merged into recursively merged into one another.\n\n\nUsage\n\n\nCall \nDecoy::el('key')\n in your frontend views to return the value for an Element.  They key is the \n.\n concatented keys for the three heirachies: \npage.section.field\n.  The value will be massaged in different ways depending on the element type:\n\n\n\n\nTexteareas will have \nnl2br()\n applied\n\n\nWYSIWYG will be wrapped in a \n<p>\n if there is no containing HTML element\n\n\nImages will be copied out of the /img directory and into /uploads\n\n\n\n\nAdditional notes\n\n\n\n\nThe default format for a field in the admin is a text input\n\n\nImages \nmust\n be stored in the /public/img directory.  Decoy will automatically make a copy in the uploads directory for Croppa to act on.  Decoy::el() will then return the path to the uploads copy.  This is done because PagodaBox doesn\u2019t let you push things via git to shared writeable directories, so committing the image to the uploads dir would not work.\n\n\nYAML only allows whitespace indenting, no tabs\n\n\nYou can use \nImage\n \ncrop()\n on \nimage\n fields.  For instance: \nDecoy::el('home.intro.image')->crop(500)->url",
            "title": "Elements"
        },
        {
            "location": "/elements/#setup",
            "text": "Begin by customizing the  config/decoy/elements.yaml  file that will have been published during the Decoy installation.  Roughly speaking, there are 3 nested layers of hashes that configure elements:   A page  A section  A field       The syntax has a terse form:  homepage : \n     marquee : \n         image , image :   /img/temp/ home - marquee . jpg   And an expanded form:  homepage : \n     label :   The   homepage \n     help :   This   is   the   site   homepage \n     sections : \n         marquee : \n             label :   Home   marquee \n             help :   The   featured   image   section   on   the   top   of   homepage \n             fields : \n                 image : \n                     type :   image \n                     label :   An   image \n                     value :   /img/temp/ home - marquee . jpg   The two forms can be intermixed. Check out the  elements.yaml  file for more examples.  Alternatively, you can create a directory at  config/decoy/elements  and create many different *.yaml files within there. They all share the same syntax as the main  elements.yaml  and get merged into recursively merged into one another.",
            "title": "Setup"
        },
        {
            "location": "/elements/#usage",
            "text": "Call  Decoy::el('key')  in your frontend views to return the value for an Element.  They key is the  .  concatented keys for the three heirachies:  page.section.field .  The value will be massaged in different ways depending on the element type:   Texteareas will have  nl2br()  applied  WYSIWYG will be wrapped in a  <p>  if there is no containing HTML element  Images will be copied out of the /img directory and into /uploads",
            "title": "Usage"
        },
        {
            "location": "/elements/#additional-notes",
            "text": "The default format for a field in the admin is a text input  Images  must  be stored in the /public/img directory.  Decoy will automatically make a copy in the uploads directory for Croppa to act on.  Decoy::el() will then return the path to the uploads copy.  This is done because PagodaBox doesn\u2019t let you push things via git to shared writeable directories, so committing the image to the uploads dir would not work.  YAML only allows whitespace indenting, no tabs  You can use  Image   crop()  on  image  fields.  For instance:  Decoy::el('home.intro.image')->crop(500)->url",
            "title": "Additional notes"
        },
        {
            "location": "/images/",
            "text": "Decoy has an polymorphic Image model that should be used to store all model images.\n\n\nSetup\n\n\nAdd the \nBkwld\\Decoy\\Models\\Traits\\HasImages\n trait to models that have images:\n\n\nclass Article extends Base {\n\n\n  use \\Bkwld\\Decoy\\Models\\Traits\\HasImages;\n\n\n}\n\n\n\n\n\n\nUsage\n\n\nFrom the frontend, you can use the \nimg()\n helper provided by the trait that was added to access a particular \nImage\n for your model.  Then, chain on one of the \nImage\n accessors.  For example:\n\n\n$article->img()->url;\n\n\n# /uploads/1/1/image1.jpg\n\n\n\n$article->img('marquee')->crop(400,200)->url\n\n\n# /uploads/1/1/image2-400x200.jpg\n\n\n\n$article->img('marquee')->crop(400,200)->bkgd\n\n\n# /background-image: url('/uploads/1/1/image2-400x200.jpg');background-position: 20% 30%;\n\n\n\n$article->img('marquee')->crop(400,200)->tag\n\n\n# <img src=\"/background-image: url('/uploads/1/1/image2-400x200.jpg');\" alt=\"I am alt\">\n\n\n\n$article->img('marquee')->crop(400,200)->div->class('marquee')\n\n\n# <div style=\"background-image: url('/uploads/1/1/image2-400x200.jpg');background-position: 20% 30%;\" role=\"img\" aria-label=\"I am alt\" class=\"marquee\"></div>\n\n\n\n\n\n\nIf no image exists, the response will be an empty string.  For instance:\n\n\n$article->img('fake')->crop(400,200)->tag\n\n\n#\n\n\n\n\n\n\nValidation\n\n\nAdd images to the \n$rules\n on a model like:\n\n\n$rules = [\n\n\n  'images.default' => 'required',\n\n\n  'images.listing' => 'required|mimes:png'\n\n\n]\n\n\n\n\n\n\nJSON\n\n\nThe \nBkwld\\Decoy\\Collections\\Base\n collection that all models return adds some helpers for adding cropped images to models before they get serialized.  See the \nmodel docs\n.",
            "title": "Images"
        },
        {
            "location": "/images/#setup",
            "text": "Add the  Bkwld\\Decoy\\Models\\Traits\\HasImages  trait to models that have images:  class Article extends Base {    use \\Bkwld\\Decoy\\Models\\Traits\\HasImages;  }",
            "title": "Setup"
        },
        {
            "location": "/images/#usage",
            "text": "From the frontend, you can use the  img()  helper provided by the trait that was added to access a particular  Image  for your model.  Then, chain on one of the  Image  accessors.  For example:  $article->img()->url;  # /uploads/1/1/image1.jpg  $article->img('marquee')->crop(400,200)->url  # /uploads/1/1/image2-400x200.jpg  $article->img('marquee')->crop(400,200)->bkgd  # /background-image: url('/uploads/1/1/image2-400x200.jpg');background-position: 20% 30%;  $article->img('marquee')->crop(400,200)->tag  # <img src=\"/background-image: url('/uploads/1/1/image2-400x200.jpg');\" alt=\"I am alt\">  $article->img('marquee')->crop(400,200)->div->class('marquee')  # <div style=\"background-image: url('/uploads/1/1/image2-400x200.jpg');background-position: 20% 30%;\" role=\"img\" aria-label=\"I am alt\" class=\"marquee\"></div>   If no image exists, the response will be an empty string.  For instance:  $article->img('fake')->crop(400,200)->tag  #",
            "title": "Usage"
        },
        {
            "location": "/images/#validation",
            "text": "Add images to the  $rules  on a model like:  $rules = [    'images.default' => 'required',    'images.listing' => 'required|mimes:png'  ]",
            "title": "Validation"
        },
        {
            "location": "/images/#json",
            "text": "The  Bkwld\\Decoy\\Collections\\Base  collection that all models return adds some helpers for adding cropped images to models before they get serialized.  See the  model docs .",
            "title": "JSON"
        },
        {
            "location": "/localization/",
            "text": "Decoy\u2019s localization features come in two flavors: (1) localization of Elements and (2) localization of model instances.  In both cases, you begin by editing the Decoy \u201csite.php\u201d config file.\n\n\nElements localization\n\n\nAdd each locale you need to support to the \nlocales\n array, where the keys are a slug for the locale and the value is the readable name for the locale.  The former is stored in the database while the latter is displayed in form elements in Decoy.  As long as there are more than one locale in that array, the Elements UI will show a locale selector:\n\n\n\n\nModel localization\n\n\nTo localize model records, the database table for your model needs to have the following columns:\n\n\n\n\nVARCHAR \nlocale\n\n\nVARCHAR \nlocale_group\n\n\n\n\nHere is an example migration schema:\n\n\nSchema::create('articles', function(Blueprint $table) {\n\n\n    $table->string('locale');\n\n\n    $table->string('locale_group')->index();\n\n\n    $table->boolean('public')->nullable(); // Not required, just an example\n\n\n    $table->index(['locale', 'public']); // You'll want to use locale in indexes\n\n\n    $table->index(['public', 'locale']);\n\n\n});\n\n\n\n\n\n\nThen, either set the \nauto_localize_root_models\n config to \ntrue\n in the \u201csite.php\u201d file OR (to control localization more granularly) set the \n$localizable\n static property of a model to \ntrue\n:\n\n\nclass Article extends Base {\n\n\n    static public $localizable = true;\n\n\n}\n\n\n\n\n\n\nIf you set the \n$localizable\n property to false, it will override the global \nauto_localize_root_models\n config for the model.  When a model has been set to be localizeable, the following two UI elements are automatically added to edit forms.  In the left column, you can change the locale of the model being edited:\n\n\n\n\nIn the right column, you can duplicate the current model into a different locale, where you can begin to customize the fields for \nthat\n locale:\n\n\n\n\nThe \u201cCompare\u201d radio buttons enable tooltips for each form group that show the value of that group in the selected locale.\n\n\nFrontend implementation\n\n\nDecoy provides some helpers for selecting a locale on the frontend of the site.  It\u2019s assumed that there will be some way that a user chooses a locale.  This might be from a menu or by accessing the site from a special domain.  It is up to the developer to implement this uniquely for the site.  To tell Decoy what was selected, call \nDecoy::locale($locale)\n where \n$locale\n is the slug of the locale (the key from the \u201csite.php\u201d \nlocales\n config array).  Here is an example route that would set the locale based on what was passed in:\n\n\nRoute::get('locale/{locale}', ['as' => 'change locale', function($locale) {\n\n\n    Decoy::locale($locale);\n\n\n    return Redirect::back();\n\n\n}]);\n\n\n\n\n\n\nYou can get the current locale by calling \nDecoy::locale()\n with no argument.  The Decoy Base Model provides a scope for restricting queries by the current locale by chaining \n->localize()\n onto your query.  For instance:\n\n\nArticle::ordered()->public()->localize()->paginate(10)",
            "title": "Localization"
        },
        {
            "location": "/localization/#elements-localization",
            "text": "Add each locale you need to support to the  locales  array, where the keys are a slug for the locale and the value is the readable name for the locale.  The former is stored in the database while the latter is displayed in form elements in Decoy.  As long as there are more than one locale in that array, the Elements UI will show a locale selector:",
            "title": "Elements localization"
        },
        {
            "location": "/localization/#model-localization",
            "text": "To localize model records, the database table for your model needs to have the following columns:   VARCHAR  locale  VARCHAR  locale_group   Here is an example migration schema:  Schema::create('articles', function(Blueprint $table) {      $table->string('locale');      $table->string('locale_group')->index();      $table->boolean('public')->nullable(); // Not required, just an example      $table->index(['locale', 'public']); // You'll want to use locale in indexes      $table->index(['public', 'locale']);  });   Then, either set the  auto_localize_root_models  config to  true  in the \u201csite.php\u201d file OR (to control localization more granularly) set the  $localizable  static property of a model to  true :  class Article extends Base {      static public $localizable = true;  }   If you set the  $localizable  property to false, it will override the global  auto_localize_root_models  config for the model.  When a model has been set to be localizeable, the following two UI elements are automatically added to edit forms.  In the left column, you can change the locale of the model being edited:   In the right column, you can duplicate the current model into a different locale, where you can begin to customize the fields for  that  locale:   The \u201cCompare\u201d radio buttons enable tooltips for each form group that show the value of that group in the selected locale.",
            "title": "Model localization"
        },
        {
            "location": "/localization/#frontend-implementation",
            "text": "Decoy provides some helpers for selecting a locale on the frontend of the site.  It\u2019s assumed that there will be some way that a user chooses a locale.  This might be from a menu or by accessing the site from a special domain.  It is up to the developer to implement this uniquely for the site.  To tell Decoy what was selected, call  Decoy::locale($locale)  where  $locale  is the slug of the locale (the key from the \u201csite.php\u201d  locales  config array).  Here is an example route that would set the locale based on what was passed in:  Route::get('locale/{locale}', ['as' => 'change locale', function($locale) {      Decoy::locale($locale);      return Redirect::back();  }]);   You can get the current locale by calling  Decoy::locale()  with no argument.  The Decoy Base Model provides a scope for restricting queries by the current locale by chaining  ->localize()  onto your query.  For instance:  Article::ordered()->public()->localize()->paginate(10)",
            "title": "Frontend implementation"
        },
        {
            "location": "/model_duplication/",
            "text": "Decoy implements \nCloner\n to allow admins to duplicate models.  A single model and it\u2019s files should work right out of the box.  To support cloning relationships, specify a \n$cloneable_relations\n array on the model.  Read the Cloner docs for more info and some other options.",
            "title": "Model Duplication"
        },
        {
            "location": "/permissions/",
            "text": "Here is an example of a groups and permissions that would be in the \nsite\n config:\n\n\n'roles' => array(\n    'general' => '\n<b>\nGeneral\n</b>\n - Can manage sub pages of services and buildings (except for forms)',\n    'forms' => '\n<b>\nForms\n</b>\n - Can do everything a general admin can but can also manage forms.',\n    'super' => '\n<b>\nSuper Admin\n</b>\n - Can manage everything.',\n),\n\n'permissions' => [\n    'general' => [\n        'cant' => [\n            'create.categories',\n            'destroy.categories',\n            'manage.slides',\n            'manage.sub-categories',\n            'manage.forms',\n        ],\n    ],\n    'forms' => [\n        'can' => [\n            'read.forms',\n            'update.forms',\n            'manage.articles',\n        ],\n        'cant' => [\n            'publish.articles'\n        ],\n    ],\n    'forms' => [ // Demonstrating using a closure\n        'can' => function() {\n            return ['manage.forms'];\n        },\n    ]\n],\n\n\n\n\n\nThe roles array generates the list of roles on the Admin edit screen. The permissions array defines what a user can and can\u2019t do. \nCan\n acts as a whitelist, \ncant\n as a blacklist and is dealt with second so it can override \ncan\n.   The full list of supported actions that can be denied are:\n\n\n\n\ncreate\n\n\nread\n\n\nupdate\n\n\ndestroy\n\n\npublish (set the \nvisibility\n)\n\n\nmanage (combines all of the above)\n\n\n\n\nIn addition, you can make custom permissions and check for them using the same methods.  For instance, you could add an \napprove.articles\n permission to the config and then check for it using \napp('decoy.user')->can('approve', 'articles')\n.  This is preferred over checking the admin\u2019s role as it is more flexible and expressive.",
            "title": "Permissions"
        },
        {
            "location": "/slugs/",
            "text": "Slugs are auto created from returned by \nBkwld\\Decoy\\Model\\Base::getAdminTitleAttribute()\n. Your model should have a validation rule like:\n\n\n'slug' => 'alpha_dash'\n\n\n\n\n\nAs long as there is a validation rule with a key of \nslug\n, Decoy will use cviebrock/eloquent-sluggable to create a slug using rules defined in the base model.",
            "title": "Slugs"
        },
        {
            "location": "/validation/",
            "text": "Custom validation\n\n\nAn easy way to add custom validation to models is by specifying an \nonValidating\n method, taking the \n$validation\n object, adding errors to it, and returning it.  Special logic in the Base Controller\u2019s validate method will see the returned \nValidator\n and its errors and respond appropriately.\n\n\npublic function onValidating(\n$\nvalidation\n) \n{\n\n\n    \n$\nvalidation\n->errors()->add('last_name', 'This last name sucks');\n\n\n    throw new \\Bkwld\\Decoy\\Exceptions\\ValidationFail(\n$\nvalidation\n);\n\n\n}\n\n\n\n\n\n\nHere\u2019s an example of how to set unique exceptions for the current model instance when updating.  This example assumes that the \nunique\n rule is the 3rd (the 2nd offset) rule defined for the \nname\n field.  This allows us to just append the id onto it.\n\n\npublic function onValidating(\n$\nvalidation\n) \n{\n\n\n    if (\n$\nthis\n->exists) \n{\n\n\n        \n$\nrules\n = \n$\nvalidation\n->getRules();\n\n\n        \n$\nrules\n['name'][2] .= ','.\n$\nthis\n->getKey();\n\n\n        \n$\nvalidation\n->setRules(\n$\nrules\n);\n\n\n    }\n\n\n}",
            "title": "Validation"
        },
        {
            "location": "/validation/#custom-validation",
            "text": "An easy way to add custom validation to models is by specifying an  onValidating  method, taking the  $validation  object, adding errors to it, and returning it.  Special logic in the Base Controller\u2019s validate method will see the returned  Validator  and its errors and respond appropriately.  public function onValidating( $ validation )  {       $ validation ->errors()->add('last_name', 'This last name sucks');      throw new \\Bkwld\\Decoy\\Exceptions\\ValidationFail( $ validation );  }   Here\u2019s an example of how to set unique exceptions for the current model instance when updating.  This example assumes that the  unique  rule is the 3rd (the 2nd offset) rule defined for the  name  field.  This allows us to just append the id onto it.  public function onValidating( $ validation )  {      if ( $ this ->exists)  {           $ rules  =  $ validation ->getRules();           $ rules ['name'][2] .= ','. $ this ->getKey();           $ validation ->setRules( $ rules );      }  }",
            "title": "Custom validation"
        },
        {
            "location": "/video_encoding/",
            "text": "The \nFormer::videoEncoder\n form field creates the upload field for a video in the admin.  However, there is additional setup that the developer must do to make video encoding work.  Currently, only one provider is supported for video encoding, \nZencoder\n, but it\u2019s implementation is relatively abstracted; other providers could be added in the future.\n\n\nYou\u2019ll need to edit the Decoy \u201cencoding.php\u201d config file.  It should be within your app/configs/packages directory.  The comments for each config parameter should be sufficient to explain how to use them.  Depending on where you are pushing the encoded videos to, you may need to spin up an S3 instance.  If you push to SFTP you can generate a key-pair locally (\nssh-keygen\n), post the private key to \nZencoder\n and then add the public key to the server\u2019s authorized_keys.\n\n\nNote: by default, segmented files for \nHTTP Live Streaming\n while be created.  This increases encoding cost and time but will create a better experience for mobile users.  To disable this, set the \noutputs\n config to have \n'playlist' => false\n.\n\n\nThen, models that support encoding should use the \nBkwld\\Decoy\\Models\\Traits\\Encodable\n trait.  You also need to itemize each encodable attribute on the model by defining a \n$encodable_attributes\n property on the model.\n\n\nclass Marquee extends Base {\n\n\n    use Bkwld\\Decoy\\Models\\Traits\\Encodable;\n\n\n    protected $encodable_attributes = ['video'];\n\n\n    protected $upload_attributes = ['video'];\n\n\n}\n\n\n\n\n\n\nYou may want to add an accessor for building the video tag like:\n\n\n    public function getVideoTagAttribute() {\n\n\n        if (($encoding = $this->encoding()) && ($tag = $encoding->tag)) {\n\n\n            return (string) $tag->preload();\n\n\n        }\n\n\n    }\n\n\n\n\n\n\nYou may want to use \nNgrok\n to give your dev enviornment a public address so that Zencoder can pickup the files to convert.",
            "title": "Video Encoding"
        },
        {
            "location": "/workers/",
            "text": "If you make a Laravel command extend from \nBkwld\\Decoy\\Models\\Worker\n, the command is embued with some extra functionality.  The following options get added:\n\n\n\n\n--worker\n - Run command as a worker.  As in not letting the process die.\n\n\n--cron\n - Run command as cron.  As in only a single fire per execution.\n\n\n--heartbeat\n - Check that the worker is running.  This is designed to be run from cron.\n\n\n\n\nIn a standard PagodaBox config, you would put these in your Boxile:\n\n\nweb1\n:\n\n    \nname\n:\n \napp\n\n    \ncron\n:\n\n        \n-\n \n\"* * * * *\"\n:\n \n\"php artisan <COMMAND> --heartbeat\"\n\n\n\nworker1\n:\n\n    \nname\n:\n \nworker\n\n    \nexec\n:\n \n\"php artisan <COMMAND> --worker\"\n\n\n\n\n\n\nIn this example, \u201c\n\u201d is your command name, like \u201cimport:feeds\u201d.  With a setup like the above (and the default worker static config options), your command will run every minute on PB.  And if the worker fails, the heartbeat will continue running it, at a rate of every 15 min (because of PB rate limiting).\n\n\nIn addition, by subclassing \nBkwld\\Decoy\\Models\\Worker\n, the worker command will show up in a listing in the admin at /admin/workers.  From this interface you can make sure the worker is still running and view logs.",
            "title": "Workers"
        },
        {
            "location": "/wysiwyg/",
            "text": "Decoy uses \nRedactor\n as its WYSIWYG editors.  To customize the editor, you can get a reference to the wysiwyg adapter from your /js/admin/start.js and customize their config like:\n\n\n// Redactor - Enable uploads and add \"format\" options\n\n\nwysiwyg\n \n=\n \nrequire\n(\n'decoy/assets/js/wysiwyg/factory'\n)\n\n\nwysiwyg\n.\nconfig\n.\nallowUploads\n();\n\n\nwysiwyg\n.\nconfig\n.\nmerge\n({\n\n    \nbuttons\n:\n \n[\n'formatting'\n,\n \n'bold'\n,\n \n'italic'\n,\n \n'link'\n,\n \n'file'\n,\n \n'image'\n,\n \n'horizontalrule'\n,\n \n'orderedlist'\n,\n \n'unorderedlist'\n,\n \n'html'\n],\n\n    \nformatting\n:\n \n[\n'p'\n,\n \n'h2'\n]\n\n\n});",
            "title": "WYSIWYG"
        }
    ]
}