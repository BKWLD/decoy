// --------------------------------------------------
// Retina-friendly sprites.  High density resolution detection inspired by:
// https://gist.github.com/thulstrup/2140082#comment-378557
// http://menacingcloud.com/?c=highPixelDensityDisplays
// https://github.com/AdamBrodzinski/Retina-Sprites-for-Compass/blob/cc3d3a2e57158ad8d6532a52399677075a7579b9/_retina-sprites.scss#L44
//
//
// SCSS usage:
//  .mail-button {
//  	@include sprite('mail');
//  }
//  * Assumes you have a img/sprites and img/sprites-2x folder
//
// --------------------------------------------------

@import "compass/utilities/sprites";
@import "compass/css3/background-size";

$sprite-1-map: sprite-map("sprites/*.png", $spacing: 20px);
$sprite-1-url: sprite-url($sprite-1-map);

$sprite-2-map: sprite-map("sprites-2x/*.png", $spacing: 40px);
$sprite-2-url: sprite-url($sprite-2-map);

// Shortcut mixin for primary sprites, delegates to retina-sprite mixin.
//
//  @include sprite('name');
//  @include sprite('name', 10px, 20px);
//
@mixin sprite($name, $x: 0, $y: 0, $resize: true) {
	@include retina-sprite(
		$name,
		$sprite-1-map,
		$sprite-1-url,
		$sprite-2-map,
		$sprite-2-url,
		$x, $y,
		$resize);
}

@mixin remove-sprite {
	background-image: none;
	@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
		background-image: none;
	}
}

// General purpose retina sprite mixin.
//
//  If $resize is true, then width/height will also be set.
//
//  if $x or $y is non-zero, then that's how much padding the element will have (requires
//  $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
@mixin retina-sprite($name, $map1, $url1, $map2, $url2, $x: 0, $y: 0, $resize: false) {
	@if $resize == true {
		@include sprite-dimensions($map1, $name);
	}
	background-image: $url1;
	background-position: sprite-position($map1, $name, $x, $y);
	background-repeat: no-repeat;
	
	@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
		$pos: sprite-position($map2, $name, $x, $y*2);
		background-image: $url2;
		background-position: nth($pos, 1) nth($pos, 2)/2;
		@include background-size(ceil(image-width(sprite-path($map2)) / 2), auto);
		// sprite-path() returns the path of the generated sprite sheet, which
		// image-width() calculates the width of. the ceil() is in place in case
		// you have sprites that have an odd-number of pixels in width (which
		// you shouldn't in the first place)
	}
}
