<?php namespace Bkwld\Decoy\Models;

// Dependencies
use Config;
use Request;

/**
 * Stores the status of an encoding job and the converted outputs.
 * It was designed to handle the conversion of video files to
 * HTML5 formats with Zencoder but should be abstract enough to 
 * support other types of encodings.
 */
class Encoding extends Base {

	/**
	 * Polymorphic relationship definition
	 *
	 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
	 */
	public function encodable() { return $this->morphTo(); }

	/**
	 * Set default fields and delete any old encodings for the same source.
	 * Then request the provider to encode it.
	 */
	public function onCreating() {

		// Delete any other encoding jobs for the same parent and field
		self::where('encodable_type', '=', $this->encodable_type)
			->where('encodable_id', '=', $this->encodable_id)
			->where('encodable_attribute', '=', $this->encodable_attribute)
			->delete();

		// Default values
		$this->status = 'pending';

		// Build an instance of the service provider and request an encode
		$class = Config::get('decoy::encode.provider');
		$encoder = new $class($this);
		$encoder->encode(Request::root().$this->source());

	}

	/**
	 * Get the source video for the encode
	 *
	 * @return string The path to the video relative to the 
	 *                document root
	 */
	public function source() {
		return $this->encodable->{$this->encodable_attribute};
	}

	/**
	 * Store a record of the encoding job
	 *
	 * @param string $uid A unique id generated by the service
	 * @param mixed $outputs An optional assoc array where the keys are 
	 *                       labels for the outputs and the values are 
	 *                       absolute paths of where the output will be saved
	 * @return void 
	 */
	public function storeJob($uid, $outputs = null) {
		$this->status = 'encoding';
		$this->outputs = json_encode($outputs);
	}

	/**
	 * Store a record of an error with the encode
	 * 
	 * @param  string $message
	 * @return void  
	 */
	public function storeError($message) {
		$this->status = 'error';
		$this->message = $message;
	}

}